#!/bin/bash
# Check which virtualization technology to use
# We prefer kvm, kqemu, userspace in that order.
#export PATH=/sbin:/bin:/usr/sbin:/usr/bin

# import important vars
. ./setup.sh

# unset core limit to catch qemu-kvm crashes
ulimit -c unlimited

# number of qemu-kvm retries
REP=5
# number of seconds qemu-kvm must be running to accept
THRESHOLD=5

ARGS=()
[[ -x /usr/libexec/qemu-kvm ]] && BIN=/usr/libexec/qemu-kvm
[[ -x /usr/bin/qemu-kvm ]] && BIN=/usr/bin/qemu-kvm
if [[ -c /dev/kvm ]] ; then
	ARGS+=(-cpu host)
else
	ARGS+=(-cpu max)
fi

[[ $BIN ]] || {
   echo "Could not find a working KVM or QEMU to test with!" >&2
   echo "Please install kvm or qemu." >&2
   exit 1
}

[[ -z $RAM ]] && RAM=768

[[ $(arch) = "ppc64le" ]] && ARGS+=(-M cap-nested-hv=on,cap-cfpc=broken,cap-sbbc=broken,cap-ibs=broken,cap-ccf-assist=off,cap-hpt-max-page-size=4194304)

[[ $(arch) = "x86_64" ]] && ARGS+=(-machine q35)

CPUS="2"
[[ $(nproc) -gt 4 ]] && CPUS="$(($(nproc)-2))"

# Provide rng device sourcing the hosts /dev/urandom and other standard parameters
ARGS+=(-smp $CPUS -m $RAM -nodefaults -vga none -display none -no-reboot -device virtio-rng)

if [ -f $TESTDIR/qemu.pid ] ; then
  echo "Warning, pidfile exists!"
  pkill -9 -F $TESTDIR/qemu.pid
  rm -rf $TESTDIR/qemu.pid
fi
ARGS+=(-pidfile $TESTDIR/qemu.pid)

# disk files
ARGS+=(-drive format=raw,index=0,media=disk,file=$TESTDIR/client_log.img)
ARGS+=(-drive format=raw,index=1,media=disk,file=$TESTDIR/client_check.img)
ARGS+=(-drive format=raw,index=2,media=disk,file=$TESTDIR/client_dumps.img)

# eval script args
for arg in "$@"
do
    arg_eval=
    for part in $arg
    do
        eval part_eval=$part
        if [ "$arg_eval" ]; then
            arg_eval="$arg_eval $part_eval"
        else
            arg_eval="$part_eval"
        fi
    done
    ARGS+=("$arg_eval")
done

if ! [[ $* = *-daemonize* ]]; then
    ARGS+=(-serial stdio)
fi

KVERSION=${KVERSION-$(uname -r)}

VMLINUZ="/lib/modules/${KVERSION}/vmlinuz"

if ! [ -f "$VMLINUZ" ]; then
    [[ -f /etc/machine-id ]] && read MACHINE_ID < /etc/machine-id

    if [[ $MACHINE_ID ]] && ( [[ -d /boot/${MACHINE_ID} ]] || [[ -L /boot/${MACHINE_ID} ]] ); then
        VMLINUZ="/boot/${MACHINE_ID}/$KVERSION/linux"
    else
        VMLINUZ="/boot/vmlinuz-${KVERSION}"
    fi
fi

# print escaped qemu-command command
echo "QEMU-KVM command:"
echo -n "$BIN "
for arg in "${ARGS[@]}"; do
  if [[ "$arg" == *" "* ]]; then
    echo -n "'$arg' "
  else
    echo -n "$arg "
  fi
done
echo -kernel $VMLINUZ

i=0
while (( i++ < REP)); do
  date1=$(date '+%s')
  $BIN "${ARGS[@]}" -kernel $VMLINUZ < /dev/null > /tmp/dracut_boot.log; rc=$?
  date2=$(date '+%s')

  # if qemu-kvm lasted at least 5s, finish
  (( date2 - date1 > THRESHOLD )) && exit $rc

  # else try again
  echo "qemu-kvm failed too quickly, restarting..."
done

exit $rc
