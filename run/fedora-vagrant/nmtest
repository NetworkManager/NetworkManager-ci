#! /usr/bin/python
from __future__ import print_function
import os
import re
import sys
import signal
from subprocess import call, check_output
from optparse import OptionParser

allowed_providers = ["virtualbox", "libvirt", "vmware_fusion", "vmware_workstation", "docker", "hyperv"]
def get_testmapper():
    if not os.path.isfile('testmapper.txt'):
        testmapper_url = 'https://raw.githubusercontent.com/NetworkManager/NetworkManager-ci/master/testmapper.txt'
        os.system("wget -q  %s -O testmapper.txt" % testmapper_url)

def get_test_cases_for_features(features):
    get_testmapper()
    testnames = []
    with open('testmapper.txt', 'r') as f:
        content = f.readlines()
        for feature_name in features:
            processing = False
            for line in content:
                if line.strip().startswith('#@%s_start' % feature_name):
                    processing = True
                    continue
                if line.strip().startswith('#@%s_end' % feature_name):
                    break
                if line.strip().startswith('#') :
                    continue
                line_csv = line.split(',')
                if processing and len(line_csv) >= 3:
                    test_name = line_csv[0].strip()
                    if test_name and test_name not in testnames:
                        testnames.append(test_name)
    return testnames

def get_all_features_in_testmapper():
    get_testmapper()
    features = []
    with open('testmapper.txt', 'r') as f:
        content = f.readlines()
        r = re.compile(r"^#@(.+)_start$")
        for line in content:
            m = r.match(line.strip())
            if m:
                features.append(m.group(1))
    return features

def generate_vagrantfile(provider, image, tests, branch, force_yes):
    if os.path.isfile('Vagrantfile'):
        overwrite = "unsure"
        if force_yes:
            overwrite = 'yes'
        while overwrite not in ['yes', 'no']:
            print ("Vagrantfile exists, Do you want to overwrite it [yes/no]")
            overwrite = raw_input()
        if overwrite != 'yes':
            print ("Vagrantfile not generated")
            exit(1)
        else:
            call("rm -rf Vagrantfile", shell=True)

    with open('Vagrantfile', 'w') as vf:
        print("Vagrant.configure('2') do |config|", file=vf)
        print("  config.vm.box = '%s'" %image, file=vf)
        print("  config.vm.network 'forwarded_port', guest: 80, host: 8080", file=vf)
        print("  config.vm.provider '%s' do |vb|" %provider, file=vf)
        print("    vb.memory = 2048", file=vf)
        print("    vb.cpus = 2", file=vf)
        print("    vb.auto_nat_dns_proxy = false", file=vf)
        print('    vb.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]', file=vf)
        print("  end", file=vf)
        print("  config.vm.provision 'shell', path: 'scripts/./setup.sh'", file=vf)
        if branch:
            print("  config.vm.provision 'shell', path: 'scripts/./build.sh', args: '%s'" %branch, file=vf)
        print("  config.vm.provision 'shell', path: 'scripts/./runtest.sh', args: '%s'" %tests, file=vf)
        print("end", file=vf)
    vf.close()
    print ("Vagrantfile generated")

def precess_raw_features(features):
    tests = ""
    if not features or features.lower() == 'all':
        raw_features = 'adsl,alias,bond,bridge,connection,dispatcher,ethernet,general,ipv4,ipv6,libreswan,openvpn,ppp,pptp,team,tuntap,vlan,vpnc'
    else:
        raw_features = features
    features = []
    for f in raw_features.split(','):
        features.append(f.strip())
    for test in get_test_cases_for_features(features):
        tests=tests+test+" "
    return tests.strip()

def is_branch_valid(branch):
    if check_output("git ls-remote git://anongit.freedesktop.org/NetworkManager/NetworkManager |awk '{print $2}'", shell=True).find('refs/tags/%s\n' %branch) == -1 and \
       check_output("git ls-remote git://anongit.freedesktop.org/NetworkManager/NetworkManager |awk '{print $2}'", shell=True).find('refs/heads/%s\n' %branch) == -1:
        return False
    else:
        return True

def wizard_collect_values(branch=None):
    # BOX
    print ("Specify VM provider to be used:")
    print ("Defaults to virtualbox [" + ', '.join (allowed_providers) + "]"),
    provider = raw_input()
    while not provider in allowed_providers:
        if provider:
            print ("Provider '%s' is unsupported." %provider)
            provider = raw_input()
        else:
            provider = 'virtualbox'

    print ("Specify Vagrant box to be used:")
    print ("Defaults to vbenes/fedora-25-server."),
    image = raw_input()
    if not image:
        image = 'vbenes/fedora-25-server'

    # TESTS
    print ("Specify area of tests:")
    print ("Defaults to all but can be a list from adsl,alias,bond,bridge,connection,dispatcher,ethernet,general,ipv4,ipv6,libreswan,openvpn,ppp,pptp,team,tuntap,vlan,vpnc,nmtui"),
    features = raw_input()
    tests = precess_raw_features(features)

    # COMPILATION
    print ("Do you want to compile NM? [yes|no] yes")
    compile = raw_input()
    if not compile or compile == "yes":
        print ("Specify NM branch:")
        while not branch or not is_branch_valid(branch):
            if branch:
                print ("Branch %s doesn't exist in NM repo." %branch)
            branch = raw_input()

    return provider, image, tests, branch

def start_vagrant(force_yes):
    if force_yes:
        call("vagrant destroy -f" , shell=True)
        start = 'yes'
    else:
        print ("Do you want to execute 'vagrant up'? [yes|no] yes")
        start = raw_input()
    if not start or start == 'yes':
        #call("vagrant destroy" , shell=True)
        print ("Results will be available shortly at http://localhost:8080/results/")
        call("vagrant up" , shell=True)

def signal_handler(signal, frame):
    print("")
    exit(0)

def main():
    signal.signal(signal.SIGINT, signal_handler)

    usage = "usage: %prog [options]"
    parser = OptionParser(usage=usage)
    parser.add_option("-w", "--wizard", action="store_true",
                        help="Use wizard mode.", dest="wizard")
    parser.add_option("-d", "--defaults", action="store_false",
                        help="Use default mode. test ALL tests on MASTER branch using vbenes/fedora-25-server on virtualbox", dest="wizard")
    parser.add_option("-p", "--provider",
                        help="VM provider (" + ', '.join (allowed_providers) + ")")
    parser.add_option("-i", "--image",
                        help="VM provider box name. (e.g. vbenes/fedora-25-server)")
    parser.add_option("-f", "--features",
                        help="Comma separated list of test areas. All or anything from adsl,alias,bond,bridge,connection,dispatcher,ethernet,general,ipv4,ipv6,libreswan,openvpn,ppp,pptp,team,tuntap,vlan,vpnc,nmtui")
    parser.add_option("-b", "--branch",
                        help="NM branch to be used for compilation.")
    parser.add_option("-Y", "--YES", action="store_true",
                        help="Answer yes to all question. Can be dangerous and overwrite things!", dest="force_yes")
    (options, args) = parser.parse_args()

    force_yes = False
    if len(sys.argv[1:]) == 0:
        parser.print_help()
        exit(1)
    if options.wizard == True:
        provider, image, tests, branch = wizard_collect_values()
    elif options.wizard == False:
        provider = "virtualbox"
        image = "vbenes/fedora-25-server"
        tests = precess_raw_features('all')
        branch = "master"
    else:
        if  not options.image or \
            not options.features or \
            not options.branch or \
            not options.provider:
            print ('Error: Incorrect number of arguments.\n\n')
            parser.print_help()
            exit(1)
        else:
            provider = options.provider
            if not provider in allowed_providers:
                print ('Error: invalid provider.\n\n')
                exit(1)
            image = options.image
            tests = precess_raw_features(options.features)
            if tests == '':
                print ('Error: No tests to be executed.\n\n')
                exit(1)
            branch = options.branch
            if not is_branch_valid(branch):
                print ('Error: invalid branch.\n\n')
                exit(1)

    if options.force_yes:
        force_yes=True

    generate_vagrantfile(provider, image, tests, branch, force_yes)
    start_vagrant(force_yes)
    exit(0)

if __name__ == "__main__":
    main()
