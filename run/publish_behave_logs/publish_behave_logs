#!/usr/bin/env python3
"""
When report_.*html file is created in /tmp, it will be copied to httpd DocumentRoot
with a file modification time stamp appended and FAIL_ or EMPTY_ prepended to the
new file name for clearer orientation and to make sure we keep logs of older runs
of the same case
"""
from glob import glob
from multiprocessing import Pool, Process
from os.path import basename, exists, getmtime, isdir
from shutil import copy2
from sys import argv, stdout
from time import localtime, sleep, strftime
from selinux import restorecon
import re
import pyinotify


def copy_file(src):
    """copy the file, add FAIL_ prefix if scenarion not marked as passed"""
    prefix = "FAIL_"
    success_re = re.compile(
        r"""<div[^>]+class="(scenario-header[^"]+passed|passed[^"]+scenario-header)"""
    )
    skip_re = re.compile(
        r"""<div[^>]+class="(scenario-header[^"]+skipped|skipped[^"]+scenario-header)"""
    )
    read_size = 2**20  # read only 1st MB
    try:
        f = open(src, "r")
        cont = f.read(read_size)
        if success_re.search(cont):
            prefix = ""
        elif skip_re.search(cont):
            prefix = "SKIP_"
    except:
        pass
    file_name = basename(src).rsplit(".", 1)[0]
    file_ext = basename(src).rsplit(".", 1)[1]
    mtime = strftime("%m%d-%H%M%S", localtime(getmtime(src)))
    target = "{}/{}{}-{}.{}".format(DOCUMENT_ROOT, prefix, file_name, mtime, file_ext)
    copy2(src, target)
    restorecon(target)
    print("Written file: {}".format(target))
    stdout.flush()


def process_close_write(event):
    """Called when file in /tmp is close()-d. If it matches the pattern, new
    process that will copy it after 2 s delay will be created"""
    newfile = event.pathname
    if newfile.startswith("/tmp/report_") and newfile.endswith(".html"):
        Process(target=copy_file, args=(newfile,)).start()


def main():
    wm = pyinotify.WatchManager()
    notifier = pyinotify.Notifier(wm, default_proc_fun=process_close_write)
    wm.add_watch("/tmp", pyinotify.IN_CLOSE_WRITE)

    # copy already existing files
    p = Pool()
    init_copy = p.map_async(copy_file, glob("/tmp/report_*html"))
    p.close()

    try:
        notifier.loop()
    except KeyboardInterrupt:
        print("Caught interrupt, quitting.")
    finally:
        notifier.stop()
        init_copy.wait()


if __name__ == "__main__":
    global DOCUMENT_ROOT
    if len(argv) == 1:
        DOCUMENT_ROOT = "/var/www/html"
    elif len(argv) == 2:
        DOCUMENT_ROOT = argv[1]
    else:
        raise SystemExit("specify just one destination directory as command argument!")

    if not isdir(DOCUMENT_ROOT):
        raise SystemExit("Directory {} must exist!".format(DOCUMENT_ROOT))

    main()
